$(function () {
  var barrels,
    barrelsSpinning = 0,
    stopBarrels = false,
    barrelsAnimationSpeed = 1000,
    money = 0,
    inRoll = false,
    incrementInterval,
    lastBetAmount = 0,
    layoutType,
    template,
    errorTpl,
    $container = $('#slots-container');

  function init() {
    template = Handlebars.compile($('#slots-template').html());
    errorTpl = Handlebars.compile($('#error-tpl').html());
    $container.html(template());

    setEvents();
    setupGame();
  }

  var setEvents = function () {
    $container.on('click', '.btn-sound', toggleSound);
    $container.on('click', '.bet-btn', function () {
      var betAmount = $(this).attr('data-bet');
      if (!inRoll && !$(this).hasClass('disabled')) {
        betButtonHandler(betAmount);
      }
    });
    $container.on('click', '.btn-pay-table', function () {
      $('.slots-area-wrap').toggleClass('table-act');
    });
  };

  function setupGame() {
    money = 1000; // Initial amount of money
    barrelsAnimationSpeed = 1000; // Animation speed of the barrels

    moneyChanged();
    checkButtons();

    barrels = [
      new Barrel(0),
      new Barrel(1),
      new Barrel(2)
    ];
  }

  function betButtonHandler(betAmount) {
    lastBetAmount = betAmount;
    spinReels();
    if (!inRoll) {
      inRoll = true;
      setTimeout(stopReels, 3000); // Stop the reels after 3 seconds (adjust timing as needed)
    }
  }

  function spinReels() {
    barrelsSpinning = 3;
    barrels[0].spin();
    barrels[1].spin();
    barrels[2].spin();
  }

  function stopReels() {
    stopBarrels = true;
  }

  function displayResults() {
    inRoll = false;
    stopBarrels = false;

    var symbols = [];
    for (var i = 0; i < barrels.length; i++) {
      var symbol = barrels[i].stopAt;
      symbols.push(symbol);
    }

    var result = getResult(symbols);
    var comboTitle = result.comboTitle;
    var moneyWon = result.moneyWon;

    if (moneyWon > 0) {
      infoLog("You won $" + moneyWon + " with " + comboTitle);
    } else {
      infoLog("Try again!");
    }

    money += moneyWon;
    moneyChanged();
    checkButtons();
  }

  function getResult(symbols) {
    // Here you can define your own logic to determine the result based on the
    // combination of symbols received. This can involve checking for matching symbols,
    // special combinations, or any other rules specific to your game.

    // Example logic for a simple winning combination
    var winningCombination = ['A', 'A', 'A'];
    var comboTitle = "No Win";
    var moneyWon = 0;

    if (symbols.join('') === winningCombination.join('')) {
      comboTitle = "Jackpot!";
      moneyWon = lastBetAmount * 10;
    }

    return { comboTitle: comboTitle, moneyWon: moneyWon };
  }

  function moneyChanged() {
    $container.find('#moneyAmount').text('$' + money);
  }

  function checkButtons() {
    $container.find('.bet-btn').each(function () {
      var $button = $(this);
      var betAmount = parseInt($button.attr('data-bet'));
      $button.toggleClass('disabled', betAmount > money);
    });
  }

  var Barrel = function (id) {
    this.barrelID = id;
    this.homeTop = this.location = 15;
    this.$barrel = $container.find('#reel' + (this.barrelID + 1));
    this.spinning = false;
    this.stopAt = '';

    var numItems = 3; // Number of symbols/items in the barrel

    for (var i = 0; i < numItems; i++) {
      var $item = $('<div class="item"></div>');
      this.$barrel.append($item);
    }

    this.$barrel.css('top', this.homeTop + 'px');
  };

  Barrel.prototype.spin = function () {
    var that = this;
    if (that.spinning) return;

    that.spinning = true;
    that.speed = 0;

    var startTime = Date.now();

    function frameUpdater() {
      var timeDifference = Date.now() - startTime;

      if (stopBarrels) {
        var stopAt = getRandomItem();
        that.stopAt = stopAt;
        that.spinning = false;
        that.$barrel.animate({ top: that.homeTop + "px" }, 400, 'easeOutBounce', animationFinished);
        return;
      }

      if (that.loopTime <= timeDifference) {
        var currentItem = getCurrentItem();
        var nextItem = getNextItem(currentItem);
        that.$barrel.animate({ top: nextItem + "px" }, 100, 'linear', frameUpdater);
        return;
      }

      var nextSpeed = (timeDifference / Barrel.MAX_SPEED_MS) * Barrel.MAX_SPEED;
      that.speed = nextSpeed < Barrel.MAX_SPEED ? nextSpeed : Barrel.MAX_SPEED;
      that.location += that.speed;

      if (that.location >= that.homeTop) {
        var currentItem = getCurrentItem();
        var nextItem = getNextItem(currentItem);
        that.$barrel.prepend(that.$barrel.children().last());
        that.location = that.location % that.itemHeight - that.itemHeight;
      }

      that.$barrel.css('top', that.location + "px");
      requestAnimationFrame(frameUpdater);
    }

    window.cancelAnimationFrame(that.spinerRequestFrameId);
    frameUpdater();
  };

  function getRandomItem() {
    var items = ['A', 'B', 'C']; // Replace with your symbols/items
    var randomIndex = Math.floor(Math.random() * items.length);
    return items[randomIndex];
  }

  function getCurrentItem() {
    var $items = $container.find('#reel' + that.barrelID.toString() + ' .item');
    var currentItem = $items.first().css('top');
    return parseFloat(currentItem);
  }

  function getNextItem(currentItem) {
    var itemHeight = $container.find('#reel' + that.barrelID.toString() + ' .item').height();
    return (currentItem + itemHeight) % (itemHeight * 3);
  }

  function animationFinished() {
    barrelsSpinning--;
    if (barrelsSpinning === 0) {
      displayResults();
    }
  }

  function infoLog(message, size) {
    $container.find('#gameResult').text(message);
  }

  function toggleSound() {
    // Add your sound toggle logic here
    console.log("Sound toggle");
  }

  // Initialize the game
  init();
});
